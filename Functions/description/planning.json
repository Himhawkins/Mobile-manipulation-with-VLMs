[
  {
    "name": "trace_targets",
    "description": "Plans minimal waypoints to each target using A* with obstacle inflation and an offset fallback, then saves/updates a SIMPLE JSON file that only contains the robot id and its path. The saved JSON has the shape:\n{\n  \"robots\": [\n    {\n      \"id\": 782,\n      \"path\": [[sx, sy, 0], [x1, y1, d1], [x2, y2, d2], ...]\n    }\n  ]\n}\n- The first triple in `path` is always the robot start with delay=0.\n- If an entry for `id` already exists, it is replaced; otherwise it is appended.\n\nReturns:\n- \"Robot not found.\" if `robot_id` is provided but not present in Data/robot_pos.txt.\n- \"Path generation successful.\" after saving the JSON.\n\nExample Usage: `trace_targets(input_target_list=[[50,50],[150,150]], output_json_path='Data/paths.json', robot_id=782, spacing=50, delay=1000, offset=120)`",
    "parameters": {
      "type": "OBJECT",
      "properties": {
        "input_target_list": {
          "type": "ARRAY",
          "description": "Required. List of (x,y) target coordinates. Provide as a list of lists or tuples, e.g., [[50, 50], [150, 150]].",
          "items": {
            "type": "ARRAY",
            "items": {
              "type": "INTEGER"
            }
          }
        },
        "output_json_path": {
          "type": "STRING",
          "description": "Path to save the SIMPLE JSON (only id and path). Default: 'Data/paths.json'."
        },
        "start": {
          "type": "ARRAY",
          "description": "Optional start position (x, y). If not provided, uses the pose of `robot_id` from Data/robot_pos.txt, or the first robot if `robot_id` is omitted.",
          "items": {
            "type": "INTEGER"
          }
        },
        "data_folder": {
          "type": "STRING",
          "description": "Folder containing arena data, obstacles, robot poses, and the frame image. Default: 'Data'."
        },
        "spacing": {
          "type": "INTEGER",
          "description": "Dilation spacing (pixels) around obstacles for planning safety. Default: 50."
        },
        "delay": {
          "type": "INTEGER",
          "description": "Delay in milliseconds applied to EACH accepted target point. You may also pass an array of integers (one per target) if supported by your caller."
        },
        "offset": {
          "type": "INTEGER",
          "description": "Offset distance (pixels) to try around a blocked target (N/E/S/W). Default: 100."
        },
        "robot_id": {
          "type": "INTEGER",
          "description": "Required. Robot ID to read from Data/robot_pos.txt (multi-robot file with rows: id,x,y,theta)."
        },
        "verbose": {
          "type": "BOOLEAN",
          "description": "Set true to print debug logs during planning. Default: false."
        }
      },
      "required": [
        "input_target_list",
        "robot_id"
      ]
    }
  }
]
